{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useState, useEffect, Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { viewStyles, textStyles, buttonStyles, imageStyles } from \"../styles\";\nimport q from \"../Quote.json\";\nimport T from \"../Todo.json\";\nimport Checkbox from \"../../assets/UnCheckbox.png\";\n\nvar RoundButton = function (_Component) {\n  _inherits(RoundButton, _Component);\n\n  var _super = _createSuper(RoundButton);\n\n  function RoundButton(props) {\n    var _this;\n\n    _classCallCheck(this, RoundButton);\n\n    _this = _super.call(this, props);\n\n    _this.getNew = function () {\n      _this.getQuote();\n\n      _this.getTodo();\n    };\n\n    _this.state = {\n      quote: '',\n      author: '',\n      todo: ''\n    };\n    return _this;\n  }\n\n  _createClass(RoundButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getQuote();\n      this.getTodo();\n    }\n  }, {\n    key: \"getQuote\",\n    value: function getQuote() {\n      var data = q.quotes;\n      var quoteNum = Math.floor(Math.random() * data.length);\n      var randomQuote = data[quoteNum];\n      this.setState({\n        quote: randomQuote['quote'],\n        author: randomQuote['author']\n      });\n    }\n  }, {\n    key: \"getTodo\",\n    value: function getTodo() {\n      var data = T.Todos;\n      var TodoNum = Math.floor(Math.random() * data.length);\n      var randomTodo = data[TodoNum];\n      this.setState({\n        todo: randomTodo['Todo']\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          quote = _this$state.quote,\n          author = _this$state.author,\n          todo = _this$state.todo;\n      return React.createElement(View, {\n        style: viewStyles.container2\n      }, React.createElement(Text, {\n        style: textStyles.title2\n      }, \" RECOMMANDATION \"), React.createElement(View, {\n        style: viewStyles.item1\n      }, React.createElement(Image, {\n        style: imageStyles.image2,\n        source: Checkbox\n      }), React.createElement(View, {\n        style: {\n          justifyContent: 'center'\n        }\n      }, React.createElement(Text, {\n        style: textStyles.todo\n      }, todo), React.createElement(Text, {\n        style: textStyles.duedate\n      }, \"Set your own due date!\"))), React.createElement(Text, {\n        style: textStyles.title3\n      }, \" MOTIVATING QUOTE \"), React.createElement(View, {\n        style: viewStyles.item2\n      }, React.createElement(Text, {\n        style: textStyles.quote\n      }, \"\\\"\", quote, \"\\\"\"), React.createElement(Text, {\n        style: textStyles.author\n      }, \"- \", author)), React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row',\n          top: 30\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: buttonStyles.button,\n        onPress: this.getNew\n      }, React.createElement(Text, {\n        style: buttonStyles.title\n      }, \"ADD TO MY TO-DO LIST\")), React.createElement(TouchableOpacity, {\n        style: buttonStyles.button2,\n        onPress: this.getNew\n      }, React.createElement(Text, {\n        style: buttonStyles.title\n      }, \"RETRY\"))));\n    }\n  }]);\n\n  return RoundButton;\n}(Component);\n\nexport { RoundButton as default };\n;","map":{"version":3,"sources":["C:/Users/User PC/Documents/GitHub/todo-App/src/screens/Random2.js"],"names":["React","useState","useEffect","Component","viewStyles","textStyles","buttonStyles","imageStyles","q","T","Checkbox","RoundButton","props","getNew","getQuote","getTodo","state","quote","author","todo","data","quotes","quoteNum","Math","floor","random","length","randomQuote","setState","Todos","TodoNum","randomTodo","container2","title2","item1","image2","justifyContent","duedate","title3","item2","flex","flexDirection","top","button","title","button2"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from 'react';\r\nimport { View, Text, Image, TouchableOpacity} from 'react-native';\r\nimport {viewStyles, textStyles, buttonStyles, imageStyles} from '../styles';\r\nimport q from '../Quote.json';\r\nimport T from '../Todo.json';\r\nimport Checkbox from '../../assets/UnCheckbox.png';\r\n\r\n\r\nexport default class RoundButton extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n           quote: '',\r\n           author: '',\r\n           todo: ''\r\n        }\r\n     }\r\n  \r\n     componentDidMount() {\r\n        this.getQuote()\r\n        this.getTodo()\r\n     }\r\n  \r\n     getQuote() { \r\n              let data = q.quotes\r\n              let quoteNum = Math.floor(Math.random() * data.length)\r\n              let randomQuote = data[quoteNum]\r\n  \r\n              this.setState({\r\n                 quote: randomQuote['quote'],\r\n                 author: randomQuote['author']\r\n              })\r\n     }\r\n     getTodo() { \r\n        let data = T.Todos\r\n        let TodoNum = Math.floor(Math.random() * data.length)\r\n        let randomTodo = data[TodoNum]\r\n\r\n        this.setState({\r\n            todo: randomTodo['Todo'],\r\n        })\r\n}\r\n  \r\n    getNew = () => {\r\n        this.getQuote()\r\n        this.getTodo()\r\n    }\r\n\r\n    render() {\r\n        const { quote, author, todo } = this.state\r\n        return (\r\n            <View style={viewStyles.container2}>\r\n                <Text style={textStyles.title2}> RECOMMANDATION </Text>\r\n                <View style={viewStyles.item1}>\r\n                    <Image style={imageStyles.image2} source={Checkbox} />\r\n                    <View style={{justifyContent: 'center' }}>\r\n                        <Text style={textStyles.todo}>{todo}</Text>\r\n                        <Text style={textStyles.duedate}>Set your own due date!</Text>\r\n                    </View>\r\n                </View>\r\n                <Text style={textStyles.title3}> MOTIVATING QUOTE </Text>\r\n                <View style={viewStyles.item2} >\r\n                    <Text style={textStyles.quote}>\"{quote}\"</Text>\r\n                    <Text style={textStyles.author}>- {author}</Text>\r\n                </View>\r\n                <View style={{flex: 1, flexDirection: 'row', top: 30}}>\r\n                    <TouchableOpacity style={buttonStyles.button} onPress={this.getNew}>\r\n                        <Text style={buttonStyles.title}>ADD TO MY TO-DO LIST</Text>\r\n                    </TouchableOpacity>\r\n                    <TouchableOpacity style={buttonStyles.button2} onPress={this.getNew}>\r\n                        <Text style={buttonStyles.title}>RETRY</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </View>\r\n         );\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}